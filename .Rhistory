RMS_XXX_202X_main <- main %>%
as_survey_design(
ids = NULL,           # Specify the column with cluster IDs
weights = NULL, # Specify the column with survey weights
nest = TRUE              # Use TRUE if PSUs are nested within clusters (optional, based on your survey design)
)
outcome16_1 <- RMS_XXX_202X_main %>%
filter(!is.na(pop_groups)) %>%                     # Exclude if pop groups is NA
group_by(pop_groups) %>%                           # Show results disaggregated by pop groups
summarise(                                         # put all variables here
var_name = "outcome16_1",                          # name of the variable
num_obs_uw = unweighted(n()),                    # unweighted total count
denominator = survey_total(),                      # weighted total count
mean_value = survey_mean(outcome16_1, vartype = c("ci", "se"), na.rm = TRUE) # indicator value ( weighted) with CI and SE
)
ggplot(outcome16_1, aes(x = pop_groups, y = mean_value, fill = pop_groups)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = mean_value - mean_value_se, ymax = mean_value + mean_value_se),
width = 0.2, position = position_dodge(0.7)) +
geom_text(aes(label = round(mean_value, 2)),
vjust = -0.5, position = position_dodge(0.7)) +  # Add labels for mean_value
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
labs(
title = "Results of RBM Core Outcome 16.1",
x = "Population Groups",
y = "Mean Value with Standard Errors"
) +
scale_fill_unhcr_d() +  # Use UNHCR color palette (requires unhcrthemes package)
theme_unhcr() +         # Apply UNHCR theme (requires unhcrthemes package)
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
)
DWE10_labels <- c(
"1" = "Very unlikely",
"2" = "Somewhat unlikely",
"3" = "Somewhat likely",
"4" = "Very likely",
"99" = "Don't know"
)
# Convert DWE10 to a factor with correct levels and labels BEFORE summarizing
main <- main %>%
mutate(DWE10 = factor(DWE10, levels = names(DWE10_labels), labels = DWE10_labels))
# Summarize the counts and percentages for each category
DWE10_percentages <- main %>%
filter(!is.na(DWE10)) %>%  # Exclude missing values
count(DWE10) %>%
mutate(Percentage = n / sum(n) * 100)  # Calculate percentage based on total valid responses
ggplot(DWE10_percentages, aes(x = reorder(DWE10, Percentage), y = Percentage, fill = DWE10)) +
geom_bar(stat = "identity", width = 0.7) +
geom_text(aes(label = sprintf("%.1f%%", Percentage)),
position = position_stack(vjust = 0.5), size = 3.5) +  # Add percentage labels
coord_flip() +  # Flip the chart for better readability
labs(
title = "Likelihood of losing housing/land in the next 12 months",
x = "Likelihood",
y = "Percentage",
caption = "Source: RMS SSD 2023"
) +
scale_fill_unhcr_d() +  # Apply UNHCR color palette
theme_unhcr() +  # Apply UNHCR theme
theme(
axis.text.y = element_text(size = 10),  # Adjust text size for readability
legend.position = "none"  # Remove legend for simplicity
)
main <- main %>%
# Convert labelled/factor SPF01 columns to numeric
mutate(across(starts_with("SPF01"), ~ as.numeric(as.character(.)))) %>%
rowwise() %>%
mutate(outcome16_2 = case_when(
any(c_across(starts_with("SPF01")) == 1) ~ 1,  # If any SPF01 column has 1
all(c_across(starts_with("SPF01")) == 0) ~ 0,  # If all SPF01 columns are 0
TRUE ~ 0                                      # Default case
)) %>%
# Add labels for outcome16_2
mutate(outcome16_2 = labelled(outcome16_2,
labels = c(
'Yes' = 1,
'No' = 0
),
label = "Proportion of people covered by national social protection systems"))
RMS_XXX_202X_main <- main %>%
as_survey_design(
ids = NULL,           # Specify the column with cluster IDs
weights = NULL, # Specify the column with survey weights
nest = TRUE              # Use TRUE if PSUs are nested within clusters (optional, based on your survey design)
)
outcome16_2 <- RMS_XXX_202X_main %>%
filter(!is.na(pop_groups)) %>%                     # Exclude if pop groups is NA
group_by(pop_groups) %>%                           # Show results disaggregated by pop groups
summarise(                                         # put all variables here
var_name = "outcome16_2",                          # name of the variable
num_obs_uw = unweighted(n()),                    # unweighted total count
denominator = survey_total(),                      # weighted total count
mean_value = survey_mean(outcome16_2, vartype = c("ci", "se"), na.rm = TRUE) # indicator value ( weighted) with CI and SE
)
ggplot(outcome16_2, aes(x = pop_groups, y = mean_value, fill = pop_groups)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = mean_value - mean_value_se, ymax = mean_value + mean_value_se),
width = 0.2, position = position_dodge(0.7)) +
geom_text(aes(label = round(mean_value, 2)),
vjust = -0.5, position = position_dodge(0.7)) +  # Add labels for mean_value
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
labs(
title = "Results of RBM Core Outcome 16.2",
x = "Population Groups",
y = "Mean Value with Standard Errors"
) +
scale_fill_unhcr_d() +  # Use UNHCR color palette (requires unhcrthemes package)
theme_unhcr() +         # Apply UNHCR theme (requires unhcrthemes package)
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
)
# Define the mapping for SPF01 variables (social protection services)
spf01_mapping <- c(
"SPF01a" = "Cash / in-kind transfers",
"SPF01b" = "School feeding",
"SPF01c" = "Public works",
"SPF01d" = "Subsidies / fee waivers",
"SPF01e" = "Unemployment benefits",
"SPF01f" = "Health insurance",
"SPF01g" = "Old age pension",
"SPF01h" = "Crop / livestock insurance",
"SPF01j" = "Social work (child protection, disability, old persons, GBV)",
"SPF01k" = "Family support",
"SPF01l" = "Psychosocial support",
"SPF01m" = "Vocational training",
"SPF01n" = "Job search services",
"SPF01o" = "Wage subsidies",
"SPF01p" = "Improvements of land tenure security"
)
# Step 2: Calculate the percentage of individuals receiving each service
spf01_percentages <- main %>%
summarise(across(c(SPF01a, SPF01b, SPF01c, SPF01d, SPF01e, SPF01f, SPF01g, SPF01h,
SPF01j, SPF01k, SPF01l, SPF01m, SPF01n, SPF01o, SPF01p),
~ mean(. == 1, na.rm = TRUE) * 100)) %>%
pivot_longer(cols = everything(),
names_to = "Service",
values_to = "Percentage") %>%
mutate(Service = spf01_mapping[Service])  # Map column names to descriptive labels
# Step 3: Create the bar chart
ggplot(spf01_percentages, aes(x = reorder(Service, Percentage), y = Percentage, fill = Service)) +
geom_bar(stat = "identity", width = 0.7, color = "white") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)),
position = position_stack(vjust = 0.5), size = 3.5) +  # Add percentage labels on bars
coord_flip() +  # Flip the axes for better readability
labs(
title = "Proportion of Individuals Covered by National Social Protection Systems",
x = "Social Protection Service",
y = "Percentage",
caption = "Note: Each service is calculated independently."
) +
scale_fill_unhcr_d() +  # Use UNHCR color palette
theme_unhcr() +  # Apply UNHCR theme
theme(
axis.text.y = element_text(size = 9),  # Adjust text size for readability
legend.position = "none"  # Remove the legend for simplicity
)
View(spf01_percentages)
spf01_percentages <- main %>%
group_by(PopGroup) %>%  # Group by population group (e.g., gender, age group)
summarise(across(c(SPF01a, SPF01b, SPF01c, SPF01d, SPF01e, SPF01f, SPF01g, SPF01h,
SPF01j, SPF01k, SPF01l, SPF01m, SPF01n, SPF01o, SPF01p),
~ mean(. == "1", na.rm = TRUE) * 100)) %>%  # Ensure character comparison
pivot_longer(cols = -PopGroup,  # Exclude the PopGroup column from pivoting
names_to = "Service",
values_to = "Percentage") %>%
mutate(Service = spf01_mapping[Service])  # Map column names to descriptive labels
spf01_percentages <- main %>%
group_by(pop_groups) %>%  # Group by population group (e.g., gender, age group)
summarise(across(c(SPF01a, SPF01b, SPF01c, SPF01d, SPF01e, SPF01f, SPF01g, SPF01h,
SPF01j, SPF01k, SPF01l, SPF01m, SPF01n, SPF01o, SPF01p),
~ mean(. == "1", na.rm = TRUE) * 100)) %>%  # Ensure character comparison
pivot_longer(cols = -PopGroup,  # Exclude the PopGroup column from pivoting
names_to = "Service",
values_to = "Percentage") %>%
mutate(Service = spf01_mapping[Service])  # Map column names to descriptive labels
spf01_percentages <- main %>%
group_by(pop_groups) %>%  # Group by population group (e.g., gender, age group)
summarise(across(c(SPF01a, SPF01b, SPF01c, SPF01d, SPF01e, SPF01f, SPF01g, SPF01h,
SPF01j, SPF01k, SPF01l, SPF01m, SPF01n, SPF01o, SPF01p),
~ mean(. == "1", na.rm = TRUE) * 100)) %>%  # Ensure character comparison
pivot_longer(cols = -pop_groups,  # Exclude the PopGroup column from pivoting
names_to = "Service",
values_to = "Percentage") %>%
mutate(Service = spf01_mapping[Service])  # Map column names to descriptive labels
# Step 3: Create the bar chart
ggplot(spf01_percentages, aes(x = reorder(Service, Percentage), y = Percentage, fill = Service)) +
geom_bar(stat = "identity", width = 0.7, color = "white") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)),
position = position_stack(vjust = 0.5), size = 3.5) +  # Add percentage labels on bars
coord_flip() +  # Flip the axes for better readability
labs(
title = "Proportion of Individuals Covered by National Social Protection Systems",
x = "Social Protection Service",
y = "Percentage",
caption = "Note: Each service is calculated independently."
) +
scale_fill_unhcr_d() +  # Use UNHCR color palette
theme_unhcr() +  # Apply UNHCR theme
theme(
axis.text.y = element_text(size = 9),  # Adjust text size for readability
legend.position = "none"  # Remove the legend for simplicity
)
View(spf01_percentages)
ggplot(spf01_percentages, aes(x = reorder(Service, Percentage), y = Percentage, fill = Service)) +
geom_bar(stat = "identity", width = 0.7, color = "white") +
# Add percentage labels on bars
geom_text(aes(label = sprintf("%.1f%%", Percentage)),
position = position_stack(vjust = 0.5), size = 3.5) +
coord_flip() +  # Flip the axes for better readability
# Labels and title
labs(
title = "Proportion of Individuals Covered by National Social Protection Systems",
x = "Social Protection Service",
y = "Percentage",
caption = "Note: Each service is calculated independently."
) +
scale_fill_unhcr_d() +  # Use UNHCR color palette
theme_unhcr() +  # Apply UNHCR theme
# Customize theme elements
theme(
axis.text.y = element_text(size = 9),  # Adjust text size for readability
legend.position = "none"  # Remove the legend for simplicity
) +
# Separate plots for each population group (e.g., gender, age group)
facet_wrap(~pop_groups, scales = "free_y", ncol = 1)  # Create separate plots per PopGroup
##Delete if you don't have some of the indicators
# Combine all indicators into one data frame
combined_RBM_indicators <- bind_rows(
impact2_2,
impact2_3,
impact3_2a,
impact3_2b,
impact3_3,
outcome1_2,
outcome1_3,
outcome4_1,
outcome4_2,
outcome5_2,
outcome8_2,
outcome9_1,
outcome9_2,
outcome10_1,
outcome10_2,
outcome12_1,
outcome12_2,
outcome13_1,
outcome13_2,
outcome13_3,
outcome14_1,
outcome16_1,
outcome16_2
)
##Remove past activities
rm(list = ls())
####Load libraries and data ----
# Install pacman if not already installed
if(!require(pacman)) install.packages('pacman')
# Install the remotes package for GitHub installations
install.packages("remotes")
# Install GitHub packages if needed
remotes::install_github("unhcr/unhcrthemes")
install.packages("remotes")
##Remove past activities
rm(list = ls())
####Load libraries and data ----
# Install pacman if not already installed
if(!require(pacman)) install.packages('pacman')
# Install the remotes package for GitHub installations
install.packages("remotes")
# Load all required libraries using pacman
pacman::p_load(
tidyverse, dplyr, tidyr, rlang, purrr, magrittr, expss, srvyr,
readr, labelled, pastecs, psych, tableone, outbreaks, ggplot2,
unhcrthemes, scales, gt, webshot2, sjlabelled, waffle, writexl,
haven, readxl, dm, janitor, visdat, DiagrammeR, robotoolbox, remotes
)
# Install GitHub packages if needed
remotes::install_github("unhcr/unhcrthemes")
install.packages("remotes")
kobo_token(username = "rms_hq",
password = "RBMindicators2024!",
url = "https://kobo.unhcr.org")
kobo_setup(url = "https://kobo.unhcr.org",
token = "f06f983860da35abbf2574611c058b22fe8ea302")
asset_list <- kobo_asset_list()
asset_list
uid <- filter(asset_list, name == "RMS CATI v3.2") |> ## change the name accordingly
pull(uid)
asset <- kobo_asset(uid)
asset
###Your data frame will be displayed here without the need for you to download it from KoBo
df <- kobo_data(asset)
df
## Get individual tables from data frame object if needed
main <- pull_tbl(df, main, keyed = TRUE)
S1 <- pull_tbl(df, S1, keyed = TRUE)
#################################
####Review your datasets
#################################
#Check repeat group datasets
dm_draw(df)
### Check the columns
glimpse(df)
##Check number of entries in each sheet
dm_nrow(df)
#### You can pull below three datasets
main <- pull_tbl(df, main, keyed = FALSE)
S1 <- pull_tbl(df, S1, keyed = FALSE)
##Merge all individual level dataset into one single individual dataset
ind <- pull_tbl(df, S1, keyed = FALSE)
rm(asset,asset_list,df,P2.3,S1, S2_repeat)
duplicated(main) # Check if there are any duplicates
sum(duplicated(main)) # Number of duplicates
duplicated(ind) # Check if there are any duplicates
sum(duplicated(ind)) #Number of duplicates
get_dupes(main)
get_dupes(ind)
vis_dat(main)
table(main$IDP01_1) # Armed conflict
table(main$IDP01_2) # Generalised Violence
table(main$IDP01_3) # Persecution and or violations of human rights
table(main$IDP01_4) # Natural or human-made disasters
table(main$IDP01_5) # Other forced displacement or evictions
table(main$IDP01_6) # Other voluntary movements
table(main$IDP01_7) # Never moved home while in ${countryname}
table(main$IDP01_98) # Don't know
table(main$IDP01_99) # Prefer not to respond
main <- main %>%
mutate(idp_valid=
case_when(IDP01_1==1 | IDP01_2==1 | IDP01_3==1 | IDP01_4==1 | IDP01_5==1 ~ 1,
IDP01_6==0 | IDP01_7==0 ~ 0,
TRUE ~ NA_real_)
) %>%
mutate(idp_valid = labelled(idp_valid,
labels = c(
"Not an internally displaced person" = 0,
"Internatlly displaced person" = 1)
))
View(main)
table(main$idp_valid)
main <- main |>
mutate( # primary citizenship from REF01 and REF02
citizenship = case_when(
REF01 == "1" ~ "XXX", ##here enter the country code (where RMS took place)
REF01 %in% c("0", "98") ~ as.character(main$REF02),
REF01 == "99" ~ "99"
)
) |>
mutate(citizenship = labelled(citizenship,
labels = val_labels(ind$REF02),
label = var_label(ind$REF02)))
main <- main |>
mutate( # Primary citizenship from REF01 and REF02
citizenship = case_when(
REF01 == "1" ~ "XXX",  # Here, enter the country code (where RMS took place)
REF01 %in% c("0", "98") ~ as.character(main$REF02),
REF01 == "99" ~ "99"
)
) |>
mutate(citizenship = labelled(
citizenship,
labels = setNames(val_labels(ind$REF02), val_labels(ind$REF02)),  # Ensure labels are named
label = var_label(ind$REF02)
))
table(main$citizenship)
#####Age groups
ind$HH07_cat <- cut(ind$HH07,
breaks = c(-1, 4, 17, 59, Inf),
labels = c("0-4", "5-17", "18-59", "60+"))
ind$HH07_cat2 <- cut(ind$HH07 ,
breaks = c(-1, 17, Inf),
labels = c("0-17", "18-60+"))
table(ind$HH07_cat)
table(ind$HH07_cat2)
#Vision
barplot(table(main$DIS01), main = "Vision")
#Hearing
barplot(table(main$DIS02), main = "Hearing")
#Mobility
barplot(table(main$DIS03), main = "Mobility")
#Communication
barplot(table(main$DIS04), main = "Communication")
#Self-care
barplot(table(main$DIS05), main = "Self-care")
#Cognition
barplot(table(main$DIS06), main = "Cognition")
labelled_chr2dbl <- function(x) {
varlab <- var_label(x)
vallab <- val_labels(x)
vallab <- setNames(as.numeric(vallab),
names(vallab))
x <- as.numeric(as.character(x))
var_label(x) <- varlab
val_labels(x) <- vallab
x
}
##Check your variable if it's numeric
class(main$DIS01)
###Turn all character variables into numeric
main$DIS01 <- labelled_chr2dbl(main$DIS01)
main <- main %>%
mutate(
DIS01 = ifelse(DIS01 == "98" | DIS01 == "99", NA, DIS01),
DIS02 = ifelse(DIS02 == "98" | DIS02 == "99", NA, DIS02),
DIS03 = ifelse(DIS03 == "98" | DIS03 == "99", NA, DIS03),
DIS04 = ifelse(DIS04 == "98" | DIS04 == "99", NA, DIS04),
DIS05 = ifelse(DIS05 == "98" | DIS05 == "99", NA, DIS05),
DIS06 = ifelse(DIS06 == "98" | DIS06 == "99", NA, DIS06)
)
frequencies_DIS01 <- table(main$DIS01, useNA = "ifany")
print(frequencies_DIS01)
main$disability<- 0
main <- main %>%
mutate(disability = ifelse(
DIS01 %in% c(3, 4) |
DIS02 %in% c(3, 4) |
DIS03 %in% c(3, 4) |
DIS04 %in% c(3, 4) |
DIS05 %in% c(3, 4) |
DIS06 %in% c(3, 4),
1,
disability
))
####Check final frequencies
table(main$disability)
table(main$pop_groups)
table(ind$HH04)
pop_groups_labels <- c(
"1" = "Asylum-seekers",
"2" = "Refugees",
"3" = "People in a refugee-like situation",
"4" = "Refugee returnees",
"5" = "IDPs",
"6" = "IDP returnees",
"7" = "Stateless people",
"8" = "Host communities"
)
main <- main %>%
mutate(pop_groups = recode_factor(pop_groups, !!!setNames(as.character(pop_groups_labels), as.character(seq_along(pop_groups_labels)))))
HH04_labels <- c(
"1" = "Female",
"2" = "Male",
"3" = "Intersex",
"99" = "Prefer not to respond"
)
ind <- ind %>%
mutate(HH04 = recode_factor(HH04, !!!setNames(as.character(HH04_labels), as.character(seq_along(HH04_labels)))))
main <- main %>%
mutate(EDU01_random = factor(EDU01_random,
levels = c(0, 1, 2, 3, 4, 5, 6, 8, 9, 98, 99),
labels = c("No formal education",
"Informal schooling only",
"Less than primary education",
"Primary school completed",
"Lower secondary school completed",
"Upper secondary school completed",
"Post-secondary non-tertiary education",
"Bachelor/equivalent degree completed",
"Masters/equivalent degree or above",
"Don't know",
"Prefer not to respond")))
table(main$EDU01_random)
ind_m <- ind %>% ## Add any other variable you want to add from individual dataset
select("_parent_index", "HH07_cat", "HH07_cat2", "HH01",
"HH04","HH03", "HH07")
main <- left_join(main, ind_m,
by = c("name_respondent"="HH01",  "_index"="_parent_index"))
rm(ind_m)
main_m <- main %>%
select("_index", pop_groups, end_result) ## add variables here
ind <- left_join(main_m, ind,
by = c("_index" = "_parent_index"))
rm(main_m)
hist(main$HHH01_age, main = "Histogram of the age of household head")
hist(main$HH07)
barplot(table(main$pop_groups), main = "Population groups")
###Scatter Plots: Visualize relationships between two numerical variables using scatter plots with plot() or ggplot2.
####This helps identify correlations and patterns.
# Example of a scatter plot
plot(ind$num_var1, ind$num_var2, main = "Scatter Plot")
###For individual dataset
vars_to_remove_ind <- c("hhroster_pos_aux", "ageMD", "age18above", "age_est", "month_est", "position", "position18",
"Relation_R", "adult18", "women_b_count", "women_b", "father_b", "childLess2", "childLess2name",
"women", "father", "adult", "adult_sum", "adult01")
ind <- ind[, !(names(ind) %in% vars_to_remove_ind)]
###For main dataset
vars_to_remove_main <- c("namechild2less", "nochildless2", "women_name_b_total", "women_name_b", "father_name_b",
"women_name", "father_name", "random1ap", "random1ap2", "eadult_nap", "eadult_nap2",
"epositionap", "epositionap2", "random_indexap", "random_indexap2", "selected_adultap",
"selected_adultap2")
main <- main[, !(names(main) %in% vars_to_remove_main)]
###Add labels for disaggregation variables
###Age - HH07_cat
table(ind$HH07_cat) # 4 categories
table(ind$HH07_cat2) # under 18 / above 18
##Disability - disability
table(ind$disability)
###Gender - HH04 -- already labelled
table(ind$HH04)
###Population groups
table(ind$pop_groups)
table(main$pop_groups)
table(ind$HH07_cat) # 4 categories
table(ind$HH07_cat2) # under 18 / above 18
table(main$HH07_cat) # 4 categories
table(main$HH07_cat2) # under 18 / above 18
table(main$disability)
table(ind$disability)
table(main$disabili
table(main$disability)
table(main$disability)
